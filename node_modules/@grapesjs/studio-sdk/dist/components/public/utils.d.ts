/// <reference types="react" />
import { StudioBaseLayoutProps } from './StudioBase';
import { StudioRowProps } from './StudioRow';
import { StudioColumnProps } from './StudioColumn';
import { StudioButtonProps } from './StudioButton';
import { StudioCanvasProps } from './StudioCanvas';
import { StudioPanelLayersProps } from './StudioPanelLayers';
import { StudioPanelPagesProps } from './StudioPanelPages';
import { StudioDevicesProps } from './StudioDevices';
import { StudioTabsProps } from './StudioTabs';
import { StudioPanelSelectorsProps } from './StudioPanelSelectors';
import { StudioPanelStylesProps } from './StudioPanelStyles';
import { StudioPanelPropertiesProps } from './StudioPanelProperties';
import { StudioPanelSidebarTabsProps } from './StudioPanelSidebarTabs';
import { StudioPanelResizableProps } from './StudioPanel';
import { StudioPanelPagesLayersProps } from './StudioPanelPagesLayers';
import { StudioSidebarTopProps } from './StudioSidebarTop';
import { StudioCanvasSidebarTopProps } from './StudioCanvasSidebarTop';
import { StudioSidebarLeftProps } from './StudioSidebarLeft';
import { StudioSidebarRightProps } from './StudioSidebarRight';
import { StudioSidebarBottomProps } from './StudioSidebarBottom';
import { StudioCustomLayoutProps } from './StudioCustomLayout';
import { StudioPanelBlocksProps } from './StudioPanelBlocks';
import { StudioPanelPageSettingsProps } from './StudioPanelPageSettings';
import { StudioPanelGlobalStylesProps } from './StudioPanelGlobalStyles';
import { StudioTextProps } from './StudioText';
import { StudioPanelAssetsProps } from './StudioPanelAssets';
export interface StudioPanelHeaderProps {
    label?: string;
    collapsible?: boolean;
    collapsed?: boolean;
    commandItems?: any[];
    icon?: string;
    style?: React.CSSProperties;
    className?: string;
}
export interface StudioPanelProps extends StudioBaseLayoutProps {
    header?: StudioPanelHeaderProps | boolean;
    resizable?: StudioPanelResizableProps | boolean;
    classNameAccordion?: string;
    classNameAccordionContent?: string;
}
export declare enum StudioLayouts {
    text = "text",
    row = "row",
    column = "column",
    button = "button",
    tabs = "tabs",
    devices = "devices",
    custom = "custom",
    panelLayers = "panelLayers",
    panelPages = "panelPages",
    panelSelectors = "panelSelectors",
    panelStyles = "panelStyles",
    panelProperties = "panelProperties",
    panelSidebarTabs = "panelSidebarTabs",
    panelPagesLayers = "panelPagesLayers",
    panelBlocks = "panelBlocks",
    panelPageSettings = "panelPageSettings",
    panelGlobalStyles = "panelGlobalStyles",
    panelAssets = "panelAssets",
    sidebarLeft = "sidebarLeft",
    sidebarRight = "sidebarRight",
    sidebarTop = "sidebarTop",
    sidebarBottom = "sidebarBottom",
    canvas = "canvas",
    canvasSidebarTop = "canvasSidebarTop"
}
export type CustomLayoutComponent = Required<StudioCustomLayoutProps>['component'];
export interface StudioComponentConfigProps {
    id?: string;
}
export interface StudioConfigWithChildrenProps extends StudioComponentConfigProps {
    children?: StudioComponentsConfig | StudioComponentsConfig[];
}
export interface StudioCustomLayoutConfigProps extends Omit<StudioCustomLayoutProps, 'children'> {
    type: `${StudioLayouts.custom}`;
}
export interface StudioRowConfigProps extends Omit<StudioRowProps, 'children'>, StudioConfigWithChildrenProps {
    type: `${StudioLayouts.row}`;
}
export interface StudioColumnConfigProps extends Omit<StudioColumnProps, 'children'>, StudioConfigWithChildrenProps {
    type: `${StudioLayouts.column}`;
}
export interface StudioTextConfigProps extends Omit<StudioTextProps, 'children'>, StudioComponentConfigProps {
    type: `${StudioLayouts.text}`;
}
export interface StudioButtonConfigProps extends Omit<StudioButtonProps, 'children'>, StudioComponentConfigProps {
    type: `${StudioLayouts.button}`;
}
export interface StudioCanvasConfigProps extends Omit<StudioCanvasProps, 'children'>, StudioComponentConfigProps {
    type: `${StudioLayouts.canvas}`;
}
export interface StudioTabsConfigProps extends Omit<StudioTabsProps, 'children'>, StudioComponentConfigProps {
    type: `${StudioLayouts.tabs}`;
}
export interface StudioDevicesConfigProps extends Omit<StudioDevicesProps, 'children'>, StudioComponentConfigProps {
    type: `${StudioLayouts.devices}`;
}
export interface StudioPanelLayersConfigProps extends Omit<StudioPanelLayersProps, 'children'>, StudioComponentConfigProps {
    type: `${StudioLayouts.panelLayers}`;
}
export interface StudioPanelPagesConfigProps extends Omit<StudioPanelPagesProps, 'children'>, StudioComponentConfigProps {
    type: `${StudioLayouts.panelPages}`;
}
export interface StudioPanelSelectorsConfigProps extends Omit<StudioPanelSelectorsProps, 'children'>, StudioComponentConfigProps {
    type: `${StudioLayouts.panelSelectors}`;
}
export interface StudioPanelStylesConfigProps extends Omit<StudioPanelStylesProps, 'children'>, StudioComponentConfigProps {
    type: `${StudioLayouts.panelStyles}`;
}
export interface StudioPanelPropertiesConfigProps extends Omit<StudioPanelPropertiesProps, 'children'>, StudioComponentConfigProps {
    type: `${StudioLayouts.panelProperties}`;
}
export interface StudioPanelSidebarTabsConfigProps extends Omit<StudioPanelSidebarTabsProps, 'children'>, StudioComponentConfigProps {
    type: `${StudioLayouts.panelSidebarTabs}`;
}
export interface StudioPanelPagesLayersConfigProps extends Omit<StudioPanelPagesLayersProps, 'children'>, StudioComponentConfigProps {
    type: `${StudioLayouts.panelPagesLayers}`;
}
export interface StudioCanvasSidebarTopConfigProps extends Omit<StudioCanvasSidebarTopProps, 'children'>, StudioComponentConfigProps {
    type: `${StudioLayouts.canvasSidebarTop}`;
}
export interface StudioPanelBlocksConfigProps extends Omit<StudioPanelBlocksProps, 'children'>, StudioComponentConfigProps {
    type: `${StudioLayouts.panelBlocks}`;
}
export interface StudioPanelPageSettingsConfigProps extends Omit<StudioPanelPageSettingsProps, 'children'>, StudioComponentConfigProps {
    type: `${StudioLayouts.panelPageSettings}`;
}
export interface StudioPanelGlobalStylesConfigProps extends Omit<StudioPanelGlobalStylesProps, 'children'>, StudioComponentConfigProps {
    type: `${StudioLayouts.panelGlobalStyles}`;
}
export interface StudioPanelAssetsConfigProps extends Omit<StudioPanelAssetsProps, 'children'>, StudioComponentConfigProps {
    type: `${StudioLayouts.panelAssets}`;
}
export interface StudioSidebarLeftConfigProps extends Omit<StudioSidebarLeftProps, 'children'>, StudioConfigWithChildrenProps {
    type: `${StudioLayouts.sidebarLeft}`;
}
export interface StudioSidebarRightConfigProps extends Omit<StudioSidebarRightProps, 'children'>, StudioConfigWithChildrenProps {
    type: `${StudioLayouts.sidebarRight}`;
}
export interface StudioSidebarTopConfigProps extends Omit<StudioSidebarTopProps, 'children'>, StudioConfigWithChildrenProps {
    type: `${StudioLayouts.sidebarTop}`;
}
export interface StudioSidebarBottomConfigProps extends Omit<StudioSidebarBottomProps, 'children'>, StudioConfigWithChildrenProps {
    type: `${StudioLayouts.sidebarBottom}`;
}
export type StudioComponentsConfigProps = StudioCustomLayoutConfigProps | StudioRowConfigProps | StudioColumnConfigProps | StudioTextConfigProps | StudioButtonConfigProps | StudioTabsConfigProps | StudioCanvasConfigProps | StudioDevicesConfigProps | StudioPanelLayersConfigProps | StudioPanelPagesConfigProps | StudioPanelSelectorsConfigProps | StudioPanelStylesConfigProps | StudioPanelPropertiesConfigProps | StudioPanelSidebarTabsConfigProps | StudioPanelPagesLayersConfigProps | StudioSidebarTopConfigProps | StudioSidebarBottomConfigProps | StudioCanvasSidebarTopConfigProps | StudioPanelBlocksConfigProps | StudioPanelAssetsConfigProps | StudioPanelPageSettingsConfigProps | StudioPanelGlobalStylesConfigProps | StudioSidebarLeftConfigProps | StudioSidebarRightConfigProps;
export type StudioComponentsConfig = string | StudioComponentsConfigProps;
export declare const STUDIO_CMP_MAP: Omit<Record<StudioLayouts, React.FC<any>>, 'custom'>;
export declare const getStudioComponents: (children: any) => (import("react/jsx-runtime").JSX.Element | null)[];
